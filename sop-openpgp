#!/usr/bin/env node

/*global process*/

const yargs = require('yargs');

const encrypt = require('./encrypt');
const decrypt = require('./decrypt');
const sign = require('./sign');
const verify = require('./verify');
const inlineSign = require('./inlineSign');
const inlineVerify = require('./inlineVerify');
const inlineDetach = require('./inlineDetach');
const generate = require('./generate');
const extract = require('./extract');

const openpgp = require(process.env.OPENPGPJS_PATH || 'openpgp');

if (process.env.OPENPGPJS_CONFIG) {
  Object.assign(openpgp.config, JSON.parse(process.env.OPENPGPJS_CONFIG));
}

yargs
  .command({
    command: 'encrypt [certfile]',
    describe: 'Encrypt a Message',
    builder: {
      'with-password': {
        describe: 'symmetric encryption',
        type: 'string'
      },
      'sign-with': {
        describe: 'sign with key',
      },
      'with-key-password': {
        describe: 'unlock signing key with the given password file',
        type: 'string'
      },
      as: {
        describe: 'binary or text'
      }
    },
    handler: async (argv) => {
      encrypt(argv.withPassword, argv.signWith, argv.withKeyPassword, argv.certfile);
    }
  })
  .command({
    command: 'decrypt [certfile]',
    describe: 'Decrypt a Message',
    builder: {
      'session-key-out': {
        describe: 'session key of encrypted message',
      },
      'with-session-key': {
        describe: 'decrypt using provided session key',
      },
      'with-password': {
        describe: 'symmetric encryption',
        type: 'string'
      },
      'with-key-password': {
        describe: 'unlock key with the given password file',
        type: 'string'
      },
      'verify-with': {
        describe: 'verify with key',
      },
      'verifications-out': {
        describe: 'save verifications to file',
        alias: 'verify-out'
      }
    },
    handler: async (argv) => {
      decrypt(argv.withPassword, argv.sessionKeyOut, argv.withSessionKey, argv.verifyWith, argv.verificationsOut, argv.certfile, argv.withKeyPassword);
    }
  })
  .command({
    command: 'sign <certfile>',
    describe: 'Create Detached Signatures',
    builder: {
      'with-key-password': {
        describe: 'unlock key with the given password file',
        type: 'string'
      }
    },
    handler: async (argv) => { sign(argv.certfile, argv.withKeyPassword); }
  })
  .command({
    command: 'verify <signature> <certfile>',
    describe: 'Verify Detached Signatures',
    handler: async (argv) => { verify(argv.signature, argv.certfile); }
  })
  .command({
    command: 'inline-sign <certfile>',
    describe: 'Create an Inline-Signed Message',
    builder: {
      'with-key-password': {
        describe: 'unlock key with the given password file',
        type: 'string'
      },
      as: {
        describe: 'binary or text'
      },
      armor: {
        describe: 'armor the output',
        type: 'boolean'
      }
    },
    handler: async (argv) => {
      const armor = argv.armor != false;
      inlineSign(argv.certfile, argv.withKeyPassword, argv.as, armor);
    }
  })
  .command({
    command: 'inline-verify <certfile>',
    describe: 'Verify an Inline-Signed Message',
    builder: {
      'verifications-out': {
        describe: 'save verifications to file',
      }
    },
    handler: async (argv) => { inlineVerify(argv.certfile, argv.verificationsOut); }
  })
  .command({
    command: 'inline-detach <certfile>',
    describe: 'Split Signatures from an Inline-Signed Message',
    builder: {
      'signatures-out': {
        describe: 'save signatures to file',
      },
      armor: {
        describe: 'armor the signatures',
        type: 'boolean'
      }
    },
    handler: async (argv) => {
      const armor = argv.armor != false;
      inlineDetach(argv.signaturesOut, armor);
    }
  })
  .command({
    command: 'extract-cert <certfile>',
    describe: 'Extract a Certificate from a Secret Key',
    builder: {
      armor: {
        describe: 'armor the output',
        type: 'boolean'
      }
    },
    handler: async (argv) => {
      const armor = argv.armor != false;
      extract(armor, argv.certfile);
    }
  })
  .command({
    command: 'generate-key [userids..]',
    describe: 'Generate a Secret Key',
    builder: {
      'with-key-password': {
        describe: 'lock key with the given password file',
        type: 'string'
      },
      armor: {
        describe: 'armor the output',
        type: 'boolean'
      },
      userids: {
        describe: 'some user ids',
        type: 'string'
      }
    },
    handler: async (argv) => {
      const armor = argv.armor != false;
      const userids = argv.userids || [];
      generate(argv.withKeyPassword, armor, userids);
    }
  })
  .command({
    command: 'version',
    describe: 'Version Information',
    builder: {
      backend: {
        describe: 'display OpenPGP.js version',
        type: 'boolean'
      },
      extended: {
        describe: 'display extended version information',
        type: 'boolean'
      }
    },
    handler: (argv) => {
      if (!argv.backend || argv.extended) {
        const package = require('./package.json');
        console.log(package.name + ' ' + package.version);
      }
      if (argv.backend || argv.extended) {
        console.log(openpgp.config.versionString);
      }
      if (argv.extended) {
        console.log('Running on Node.js ' + process.version);
      }
    }
  })
  .version(false) // Disable --version option as we have our own version command.
  .help()
  .alias('help', 'h')
  .demandCommand(1)
  .strict()
  .argv;
